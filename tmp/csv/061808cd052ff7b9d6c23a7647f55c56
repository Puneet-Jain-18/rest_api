#include<bits/stdc++.h>
using namespace std;
struct Point 
{ 
    int x; 
    int y; 
}; 
bool onSegment2(Point p, Point q, Point r) 
{    float dx,dy;
float x2=r.x;
float x1= p.x;
float y2=r.y;
float y1=p.y;
float px=q.x;
float py= q.y;
 float left, top, right, bottom,slope,intercept;
    dx = x2 - x1;
    dy = y2 - y1;
    slope = dy / dx;
    // y = mx + c
    // intercept c = y - mx
    intercept = y1 - slope * x1; // which is same as y2 - slope * x2
    // For Bounding Box
    if(x1 < x2)
    {
        left = x1;
        right = x2;
    }
    else
    {
        left = x2;
        right = x1;
    }
    if(y1 < y2)
    {
        top = y1;
        bottom = y2;
    }
    else
    {
        top = y1;
        bottom = y2;
    }
    if( slope * px + intercept > (py - 0.01) &&
        slope * px + intercept < (py + 0.01))
    {
        if( px >= left && px <= right && 
            py >= top && py <= bottom )
        {
            return true;
        }
        else
           return false;
    }
    else
       return false;
} 

bool onSegment(Point p, Point q, Point r) 
{ 
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) && 
        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y)) 
       return true; 
  
    return false; 
} 
  
// To find orientation of ordered triplet (p, q, r). 
// The function returns following values 
// 0 --> p, q and r are colinear 
// 1 --> Clockwise 
// 2 --> Counterclockwise 
int orientation(Point p, Point q, Point r) 
{ 
    // See https://www.geeksforgeeks.org/orientation-3-ordered-points/ 
    // for details of below formula. 
    int val = (q.y - p.y) * (r.x - q.x) - 
              (q.x - p.x) * (r.y - q.y); 
  
    if (val == 0) return 0;  // colinear 
  
    return (val > 0)? 1: 2; // clock or counterclock wise 
} 
  
// The main function that returns true if line segment 'p1q1' 
// and 'p2q2' intersect. 
bool doIntersect(Point p1, Point q1, Point p2, Point q2) 
{ 
    // Find the four orientations needed for general and 
    // special cases 
    int o1 = orientation(p1, q1, p2); 
    int o2 = orientation(p1, q1, q2); 
    int o3 = orientation(p2, q2, p1); 
    int o4 = orientation(p2, q2, q1); 
  
    // General case 
    if (o1 != o2 && o3 != o4)
    {
        if(onSegment2(p1,p2,q1))
        {
            cout<<"RET 1\n";
        return false;
        }
        if(onSegment2(p1,q2,q1))
        {
            
            cout<<"RET 2\n";
        return false;
            
        }
        if(onSegment2(p2,p1,q2))
        {
            cout<<"RET 3\n";
        return false;
            
        }
        if(onSegment2(p1,q1,q2))
        {
            cout<<"RET 4\n";
            return false;
        }
        
        return true;
        
    }
  
    // Special Cases 
    // p1, q1 and p2 are colinear and p2 lies on segment p1q1 
    if (o1 == 0 && onSegment(p1, p2, q1)) return true; 
  
    // p1, q1 and q2 are colinear and q2 lies on segment p1q1 
    if (o2 == 0 && onSegment(p1, q2, q1)) return true; 
  
    // p2, q2 and p1 are colinear and p1 lies on segment p2q2 
    if (o3 == 0 && onSegment(p2, p1, q2)) return true; 
  
     // p2, q2 and q1 are colinear and q1 lies on segment p2q2 
    if (o4 == 0 && onSegment(p2, q1, q2)) return true; 
  
    return false; // Doesn't fall in any of the above cases 
} 
  
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    cin>>t;
    int v1[100002];
    for(int i=0;i<t;i++)
    {
        int n,q;
        cin>>n>>q;
        for(int j=0;j<n;j++)
        {
            cin>>v1[j]; 
        }
        Point final1,final2;
        for(int k=0;k<q;k++)
        {
            
                cout<<"QUERRTTTTTTTTTTTTTTTTTTTTTTTTTTTt\n";
            cin>>final1.x>>final2.x>>final1.y;
            final2.y=final1.y;
            int count=0;
            for(int i=0;i<n-1;i++)
            {
                Point current1,current2;
                current1.x=i+1;
                current1.y=v1[i];
                current2.x=i+2;
                current2.y = v1[i+1];
                cout<<final1.x<<" "<<final1.y<<"\n";
                
                cout<<final2.x<<" "<<final2.y<<"\n";
                
                cout<<current1.x<<" "<<current1.y<<"\n";
                
                cout<<current2.x<<" "<<current2.y<<"\n";
                cout<<"RESULT "<<doIntersect(final1,final2,current1,current2)<<endl;
                if(doIntersect(final1,final2,current1,current2))
                count+=1;
            }
            cout<<count<<"\n";
        }
    }
    
}